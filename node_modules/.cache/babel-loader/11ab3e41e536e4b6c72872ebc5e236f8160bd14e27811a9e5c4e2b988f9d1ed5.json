{"ast":null,"code":"var _jsxFileName = \"E:\\\\priti\\\\whatsapp-ui\\\\telegram-ui\\\\src\\\\pages\\\\chat\\\\context\\\\chat.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { inbox } from \"../data/inbox\";\n// import { Inbox } from \"common/types/common.type\";\n\n// type User = {\n//   name: string;\n//   image: string;\n// };\n\n// type ChatContextProp = {\n//   user: User;\n//   inbox: Inbox[];\n//   activeChat?: Inbox;\n//   onChangeChat: (chat: Inbox) => void;\n// };\n\n// const initialValue: ChatContextProp = {\n//   user: { name: \"Jazim Abbas\", image: \"/assets/images/girl.jpeg\" },\n//   inbox,\n//   onChangeChat() {\n//     throw new Error();\n//   },\n// };\n\n// export const ChatContext = React.createContext<ChatContextProp>(initialValue);\n\n// export default function ChatProvider(props: { children: any }) {\n//   const { children } = props;\n\n//   const [user] = useState<User>(initialValue.user);\n//   const [inbox] = useState<Inbox[]>(initialValue.inbox);\n//   const [activeChat, setActiveChat] = useState<Inbox>();\n\n//   const handleChangeChat = (chat: Inbox) => {\n//     setActiveChat(chat);\n//   };\n\n//   return (\n//     <ChatContext.Provider value={{ user, inbox, activeChat, onChangeChat: handleChangeChat }}>\n//       {children}\n//     </ChatContext.Provider>\n//   );\n// }\n\n// export const useChatContext = () => React.useContext(ChatContext);\n\n////new tha\n\n// \n\n//sec new\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  user: {\n    name: \"Jazim Abbas\",\n    image: \"/assets/images/girl.jpeg\"\n  },\n  inbox: [],\n  onChangeChat() {\n    throw new Error(\"onChangeChat is not implemented\");\n  }\n};\nexport const ChatContext = /*#__PURE__*/React.createContext(initialValue);\nexport const ChatProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user] = useState(initialValue.user);\n  const [inbox, setInbox] = useState(initialValue.inbox);\n  const [activeChat, setActiveChat] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchInbox = async () => {\n      try {\n        const response = await axios.get('https://devapi.beyondchats.com/api/get_all_chats?page=1');\n        const data = response.data.data.data; // Adjust according to your API response structure\n\n        const extractedData = data.map(item => {\n          var _item$creator$image, _item$creator$isOnlin;\n          return {\n            id: item.id.toString(),\n            name: item.creator.name,\n            image: (_item$creator$image = item.creator.image) !== null && _item$creator$image !== void 0 ? _item$creator$image : \"/assets/images/default-profile.png\",\n            // Assuming a default profile image\n            lastMessage: \"\",\n            // Placeholder for last message\n            notificationsCount: 0,\n            // Placeholder for notifications count\n            messageStatus: \"\",\n            // Placeholder for message status\n            timestamp: \"\",\n            // Placeholder for timestamp\n            isPinned: false,\n            // Placeholder for pinned status\n            isOnline: (_item$creator$isOnlin = item.creator.isOnline) !== null && _item$creator$isOnlin !== void 0 ? _item$creator$isOnlin : false // Assuming `isOnline` status from creator\n          };\n        });\n\n        setInbox(extractedData);\n        setLoading(false);\n      } catch (error) {\n        setError(\"Failed to fetch data\");\n        setLoading(false);\n      }\n    };\n    fetchInbox();\n  }, []);\n  const handleChangeChat = chat => {\n    setActiveChat(chat);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      user,\n      inbox,\n      activeChat,\n      onChangeChat: handleChangeChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"mY8Ep9ZHcTZCpzoByRO8Zf74Nyo=\");\n_c = ChatProvider;\nexport const useChatContext = () => {\n  _s2();\n  return React.useContext(ChatContext);\n};\n_s2(useChatContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","useState","useEffect","axios","initialValue","user","name","image","inbox","onChangeChat","Error","ChatContext","createContext","ChatProvider","children","setInbox","activeChat","setActiveChat","loading","setLoading","error","setError","fetchInbox","response","get","data","extractedData","map","item","id","toString","creator","lastMessage","notificationsCount","messageStatus","timestamp","isPinned","isOnline","handleChangeChat","chat","useChatContext","useContext"],"sources":["E:/priti/whatsapp-ui/telegram-ui/src/pages/chat/context/chat.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { inbox } from \"../data/inbox\";\r\n// import { Inbox } from \"common/types/common.type\";\r\n\r\n// type User = {\r\n//   name: string;\r\n//   image: string;\r\n// };\r\n\r\n// type ChatContextProp = {\r\n//   user: User;\r\n//   inbox: Inbox[];\r\n//   activeChat?: Inbox;\r\n//   onChangeChat: (chat: Inbox) => void;\r\n// };\r\n\r\n// const initialValue: ChatContextProp = {\r\n//   user: { name: \"Jazim Abbas\", image: \"/assets/images/girl.jpeg\" },\r\n//   inbox,\r\n//   onChangeChat() {\r\n//     throw new Error();\r\n//   },\r\n// };\r\n\r\n// export const ChatContext = React.createContext<ChatContextProp>(initialValue);\r\n\r\n// export default function ChatProvider(props: { children: any }) {\r\n//   const { children } = props;\r\n\r\n//   const [user] = useState<User>(initialValue.user);\r\n//   const [inbox] = useState<Inbox[]>(initialValue.inbox);\r\n//   const [activeChat, setActiveChat] = useState<Inbox>();\r\n\r\n//   const handleChangeChat = (chat: Inbox) => {\r\n//     setActiveChat(chat);\r\n//   };\r\n\r\n//   return (\r\n//     <ChatContext.Provider value={{ user, inbox, activeChat, onChangeChat: handleChangeChat }}>\r\n//       {children}\r\n//     </ChatContext.Provider>\r\n//   );\r\n// }\r\n\r\n// export const useChatContext = () => React.useContext(ChatContext);\r\n\r\n\r\n////new tha\r\n\r\n// \r\n\r\n\r\n\r\n//sec new\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Inbox } from \"common/types/common.type\";\r\n\r\ntype User = {\r\n  name: string;\r\n  image: string;\r\n};\r\n\r\ntype ChatContextProp = {\r\n  user: User;\r\n  inbox: Inbox[];\r\n  activeChat?: Inbox;\r\n  onChangeChat: (chat: Inbox) => void;\r\n};\r\n\r\nconst initialValue: ChatContextProp = {\r\n  user: { name: \"Jazim Abbas\", image: \"/assets/images/girl.jpeg\" },\r\n  inbox: [],\r\n  onChangeChat() {\r\n    throw new Error(\"onChangeChat is not implemented\");\r\n  },\r\n};\r\n\r\nexport const ChatContext = React.createContext<ChatContextProp>(initialValue);\r\n\r\nexport const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user] = useState<User>(initialValue.user);\r\n  const [inbox, setInbox] = useState<Inbox[]>(initialValue.inbox);\r\n  const [activeChat, setActiveChat] = useState<Inbox>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchInbox = async () => {\r\n      try {\r\n        const response = await axios.get('https://devapi.beyondchats.com/api/get_all_chats?page=1');\r\n        const data = response.data.data.data; // Adjust according to your API response structure\r\n\r\n        const extractedData: Inbox[] = data.map((item: any) => ({\r\n          id: item.id.toString(),\r\n          name: item.creator.name,\r\n          image: item.creator.image ?? \"/assets/images/default-profile.png\", // Assuming a default profile image\r\n          lastMessage: \"\", // Placeholder for last message\r\n          notificationsCount: 0, // Placeholder for notifications count\r\n          messageStatus: \"\", // Placeholder for message status\r\n          timestamp: \"\", // Placeholder for timestamp\r\n          isPinned: false, // Placeholder for pinned status\r\n          isOnline: item.creator.isOnline ?? false, // Assuming `isOnline` status from creator\r\n        }));\r\n\r\n        setInbox(extractedData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(\"Failed to fetch data\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInbox();\r\n  }, []);\r\n\r\n  const handleChangeChat = (chat: Inbox) => {\r\n    setActiveChat(chat);\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ user, inbox, activeChat, onChangeChat: handleChangeChat }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChatContext = () => React.useContext(ChatContext);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}